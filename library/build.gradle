buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.11.+'
    }
}

apply plugin: 'android-library'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'com.snappydb'
version = '0.3.0'
ext.packaging = 'aar'
def artifact_id = 'snappydb-lib'
def sonatypeRepositoryUrl

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 19
        versionCode 4
        versionName version
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs'
        jni.srcDirs = [] //disable automatic ndk-build call
    }

    buildTypes.debug.jniDebugBuild true

    // call regular ndk-build script from app directory
    task ndkBuild(type: Exec) {
        commandLine 'ndk-build', '-C', file('src/main').absolutePath
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
        }
    }

    productFlavors {
        x86 {
            ndk {
                abiFilter "x86"
            }
        }
        mips {
            ndk {
                abiFilter "mips"
            }
        }
        armv7 {
            ndk {
                abiFilter "armeabi-v7a"
            }
        }
        arm {
            ndk {
                abiFilter "armeabi"
            }
        }
    }


    def abiExclude = [arm:         ["armeabi-v7a", "x86", "mips"],
                      armv7:       ["armeabi", "x86", "mips"],
                      x86:         ["armeabi-v7a", "armeabi", "mips"],
                      mips:        ["armeabi-v7a", "armeabi", "x86"]
                      ]

    def jniLibMapToDelete = [:]
    android.productFlavors.each { flavor  ->
        android.buildTypes.each { build->
                def exclusionList = []
                abiExclude["${flavor.name}"].each { abiFilter ->
                    exclusionList << new File("$buildDir/bundles/${flavor.name}/${build.name}/jni/$abiFilter")
                }
                jniLibMapToDelete["${flavor.name}_${build.name}"] = exclusionList
        }
    }

    task ("cleanJniX86Debug") {
        doLast {
            jniLibMapToDelete.x86_debug.each { dir ->
                dir.deleteDir()
            }
        }
    }

    task ("cleanJniX86Release") {
        doLast {
            jniLibMapToDelete.x86_release.each { dir ->
                dir.deleteDir()
            }
        }
    }

    task ("cleanJniMipsDebug") {
        doLast {
            jniLibMapToDelete.mips_debug.each { dir ->
                dir.deleteDir()
            }
        }
    }

    task ("cleanJniMipsRelease") {
        doLast {
            jniLibMapToDelete.mips_release.each { dir ->
                dir.deleteDir()
            }
        }
    }

    task ("cleanJniArmDebug") {
        doLast {
            jniLibMapToDelete.arm_debug.each { dir ->
                dir.deleteDir()
            }
        }
    }

    task ("cleanJniArmRelease") {
        doLast {
            jniLibMapToDelete.arm_release.each { dir ->
                dir.deleteDir()
            }
        }
    }

    task ("cleanJniArmv7Debug") {
        doLast {
            jniLibMapToDelete.armv7_debug.each { dir ->
                dir.deleteDir()
            }
        }
    }

    task ("cleanJniArmv7Release") {
        doLast {
            jniLibMapToDelete.armv7_release.each { dir ->
                dir.deleteDir()
            }
        }
    }

    project.afterEvaluate {
        project.tasks.findByName('packageX86DebugLocalJar').dependsOn cleanJniX86Debug
        project.tasks.findByName('packageX86ReleaseLocalJar').dependsOn cleanJniX86Release

        project.tasks.findByName('packageMipsDebugLocalJar').dependsOn cleanJniMipsDebug
        project.tasks.findByName('packageMipsReleaseLocalJar').dependsOn cleanJniMipsRelease

        project.tasks.findByName('packageArmDebugLocalJar').dependsOn cleanJniArmDebug
        project.tasks.findByName('packageArmReleaseLocalJar').dependsOn cleanJniArmRelease

        project.tasks.findByName('packageArmv7DebugLocalJar').dependsOn cleanJniArmv7Debug
        project.tasks.findByName('packageArmv7ReleaseLocalJar').dependsOn cleanJniArmv7Release
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('de.javakaffee:kryo-serializers:0.26') {
        transitive = false
        exclude group: 'com.esotericsoftware', module: 'kryo'
    }
}

task wrapper(type: Wrapper)


if (isSnapshotBuild()) {
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}


signing {
    sign configurations.archives
}

task androidJavadocs(type: Javadoc) {
    options {
        linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
    }
    source = android.sourceSets.main.java
    classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.artifactId = artifact_id

            repository(url: sonatypeRepositoryUrl) {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'SnappyDB'
                description 'A fast and lightweight key/value database for Android'
                url 'https://github.com/nhachicha/SnappyDB'
                inceptionYear '2013'

                scm {
                    url 'https://github.com/nhachicha/SnappyDB'
                    connection 'scm:git:https://github.com/nhachicha/SnappyDB.git'
                    developerConnection 'scm:git:https://git@github.com/nhachicha/SnappyDB.git'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'nhachicha'
                        name 'Nabil Hachicha'
                        email 'nabil.hachicha@gmail.com'
                    }
                }
            }
        }
    }
}

def isSnapshotBuild() {
    return version.contains("SNAPSHOT")
}